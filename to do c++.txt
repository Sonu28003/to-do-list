#include <iostream>
#include <vector>
#include <algorithm>

struct Task {
    std::string description;
    bool completed;
};


void addTask(std::vector<Task>& tasks, const std::string& description) {
    Task newTask = {description, false};
    tasks.push_back(newTask);
    std::cout << "Task added: " << description << std::endl;
}


void viewTasks(const std::vector<Task>& tasks) {
    std::cout << "Tasks:" << std::endl;
    for (size_t i = 0; i < tasks.size(); ++i) {
        std::cout << i + 1 << ". ";
        std::cout << (tasks[i].completed ? "[X] " : "[ ] ");
        std::cout << tasks[i].description << std::endl;
    }
}


void markTaskCompleted(std::vector<Task>& tasks, size_t taskIndex) {
    if (taskIndex < tasks.size()) {
        tasks[taskIndex].completed = true;
        std::cout << "Task marked as completed: " << tasks[taskIndex].description << std::endl;
    } else {
        std::cout << "Invalid task index." << std::endl;
    }
}


void removeTask(std::vector<Task>& tasks, size_t taskIndex) {
    if (taskIndex < tasks.size()) {
        std::cout << "Task removed: " << tasks[taskIndex].description << std::endl;
        tasks.erase(tasks.begin() + taskIndex);
    } else {
        std::cout << "Invalid task index." << std::endl;
    }
}

int main() {
    std::vector<Task> tasks;

    while (true) {
        std::cout << "\n--- To-Do List Manager ---\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Remove Task\n";
        std::cout << "5. Exit\n";
        std::cout << "Choose an option: ";

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1: {
                std::cin.ignore(); 
                std::cout << "Enter task description: ";
                std::string description;
                std::getline(std::cin, description);
                addTask(tasks, description);
                break;
            }
            case 2:
                viewTasks(tasks);
                break;
            case 3: {
                std::cout << "Enter the index of the task to mark as completed: ";
                size_t taskIndex;
                std::cin >> taskIndex;
                markTaskCompleted(tasks, taskIndex - 1); 
                break;
            }
            case 4: {
                std::cout << "Enter the index of the task to remove: ";
                size_t taskIndex;
                std::cin >> taskIndex;
                removeTask(tasks, taskIndex - 1); 
                break;
            }
            case 5:
                std::cout << "Exiting program.\n";
                return 0;
            default:
                std::cout << "Invalid choice. Try again.\n";
        }
    }

    return 0;
}